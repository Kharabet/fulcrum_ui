"use strict";function r(r){return r&&"object"==typeof r&&"default"in r?r.default:r}var e=require("@web3-react/abstract-connector"),t=r(require("web3-provider-engine")),n=require("@0x/subproviders/lib/src/subproviders/trezor"),o=r(require("web3-provider-engine/subproviders/cache.js")),i=require("@0x/subproviders/lib/src/subproviders/rpc_subprovider");function c(){return(c=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}function u(r,e){return(u=Object.setPrototypeOf||function(r,e){return r.__proto__=e,r})(r,e)}exports.TrezorConnector=function(r){var e,s;function a(e){var t,n=e.chainId,o=e.url,i=e.pollingInterval,c=e.requestTimeoutMs,u=e.config,s=void 0===u?{}:u,a=e.manifestEmail,p=e.manifestAppUrl;return(t=r.call(this,{supportedChainIds:[n]})||this).chainId=n,t.url=o,t.pollingInterval=i,t.requestTimeoutMs=c,t.config=s,t.manifestEmail=a,t.manifestAppUrl=p,t}s=r,(e=a).prototype=Object.create(s.prototype),e.prototype.constructor=e,u(e,s);var p=a.prototype;return p.activate=function(){try{var r=this,e=function(){return r.provider.start(),{provider:r.provider,chainId:r.chainId}},u=function(){if(!r.provider)return Promise.resolve(new Promise((function(r){r(function(r){if(r&&r.__esModule)return r;var e={};return r&&Object.keys(r).forEach((function(t){var n=Object.getOwnPropertyDescriptor(r,t);Object.defineProperty(e,t,n.get?n:{enumerable:!0,get:function(){return r[t]}})})),e.default=r,e}(require("trezor-connect")))})).then((function(r){var e;return null!=(e=null==r?void 0:r.default)?e:r}))).then((function(e){e.manifest({email:r.manifestEmail,appUrl:r.manifestAppUrl});var u=new t({pollingInterval:r.pollingInterval});u.addProvider(new n.TrezorSubprovider(c({trezorConnectClientApi:e},r.config))),u.addProvider(new o),u.addProvider(new i.RPCSubprovider(r.url,r.requestTimeoutMs)),r.provider=u}))}();return Promise.resolve(u&&u.then?u.then(e):e())}catch(r){return Promise.reject(r)}},p.getProvider=function(){try{return Promise.resolve(this.provider)}catch(r){return Promise.reject(r)}},p.getChainId=function(){try{return Promise.resolve(this.chainId)}catch(r){return Promise.reject(r)}},p.getAccount=function(){try{return Promise.resolve(this.provider._providers[0].getAccountsAsync(1).then((function(r){return r[0]})))}catch(r){return Promise.reject(r)}},p.deactivate=function(){this.provider.stop()},a}(e.AbstractConnector);
//# sourceMappingURL=trezor-connector.cjs.production.min.js.map

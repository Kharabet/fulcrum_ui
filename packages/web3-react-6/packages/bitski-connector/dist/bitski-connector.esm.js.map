{"version":3,"file":"bitski-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\n// @ts-ignore\r\nimport { AuthenticationStatus, Bitski, BitskiSDKOptions, BitskiEngine ,User } from \"bitski\";\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  42: 'kovan'\r\n}\r\n\r\n\r\ninterface BitskiConnectorArguments {\r\n  clientId: string;\r\n  network: number;\r\n  redirectUri?: string;\r\n  additionalScopes?: string[];\r\n  options?: BitskiSDKOptions;\r\n}\r\n\r\nexport class BitskiConnector extends AbstractConnector {\r\n  private readonly networkName: any;\r\n  private readonly chainId: number;\r\n\r\n  public bitski: any\r\n\r\n  constructor({ clientId, network, redirectUri, additionalScopes, options }: BitskiConnectorArguments) {\r\n    super()\r\n    this.bitski = new Bitski(\r\n      clientId,\r\n      redirectUri,\r\n      additionalScopes,\r\n      options\r\n    )\r\n    this.chainId = network;\r\n    this.networkName = chainIdToNetwork[network];\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n\r\n\r\n    const provider = await this.getProvider()\r\n\r\n    const account = await this.bitski.signIn().then((user: User): string => user.accounts[0])\r\n\r\n    return { provider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<BitskiEngine> {\r\n\r\n    return await this.bitski.getProvider(this.networkName);\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.chainId;\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n\r\n    return (await this.bitski.getUser()).accounts[0] || null;\r\n  }\r\n\r\n  public async deactivate() {\r\n    await this.bitski.signOut();\r\n  }\r\n}"],"names":["chainIdToNetwork","BitskiConnector","clientId","network","redirectUri","additionalScopes","options","bitski","Bitski","chainId","networkName","activate","getProvider","provider","signIn","then","user","accounts","account","getChainId","getAccount","getUser","deactivate","signOut","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;AAKA,IAAMA,gBAAgB,GAAkC;AACtD,KAAG,SADmD;AAEtD,MAAI;AAFkD,CAAxD;IAcaC,eAAb;AAAA;;AAME;;;QAAcC,gBAAAA;QAAUC,eAAAA;QAASC,mBAAAA;QAAaC,wBAAAA;QAAkBC,eAAAA;AAC9D;AACA,UAAKC,MAAL,GAAc,IAAIC,MAAJ,CACZN,QADY,EAEZE,WAFY,EAGZC,gBAHY,EAIZC,OAJY,CAAd;AAMA,UAAKG,OAAL,GAAeN,OAAf;AACA,UAAKO,WAAL,GAAmBV,gBAAgB,CAACG,OAAD,CAAnC;;AACD;;AAhBH;;AAAA,SAkBeQ,QAlBf;AAAA;mBAqB2B;;6BAAA,OAAKC,WAAL,mBAAjBC;+BAEgB,OAAKN,MAAL,CAAYO,MAAZ,GAAqBC,IAArB,CAA0B,UAACC,IAAD;AAAA,iBAAwBA,IAAI,CAACC,QAAL,CAAc,CAAd,CAAxB;AAAA,SAA1B,kBAAhBC;AAEN,iBAAO;AAAEL,YAAAA,QAAQ,EAARA,QAAF;AAAYK,YAAAA,OAAO,EAAPA;AAAZ,WAAP;;;AACD,KA1BH;AAAA;AAAA;AAAA;;AAAA,SA4BeN,WA5Bf;AAAA;mBA8BiB;;6BAAA,OAAKL,MAAL,CAAYK,WAAZ,CAAwB,OAAKF,WAA7B;AACd,KA/BH;AAAA;AAAA;AAAA;;AAAA,SAiCeS,UAjCf;AAAA;mBAkCW;;AAAP,6BAAO,OAAKV,OAAZ;AACD,KAnCH;AAAA;AAAA;AAAA;;AAAA,SAqCeW,UArCf;AAAA;mBAuCkB;;6BAAA,OAAKb,MAAL,CAAYc,OAAZ;AAAd,eAAO,sBAA8BJ,QAA9B,CAAuC,CAAvC,KAA6C,IAApD;;AACD,KAxCH;AAAA;AAAA;AAAA;;AAAA,SA0CeK,UA1Cf;AAAA;oBA2CU;;6BAAA,QAAKf,MAAL,CAAYgB,OAAZ;AACP,KA5CH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAqCC,iBAArC;;;;"}
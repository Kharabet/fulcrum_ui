{"version":3,"file":"fortmatic-connector.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  42: 'kovan',\r\n  56: 'bsc'\r\n}\r\n\r\ninterface FortmaticConnectorArguments {\r\n  apiKey: string\r\n  chainId: number\r\n}\r\n\r\nexport class FortmaticConnector extends AbstractConnector {\r\n  private readonly apiKey: string\r\n  private readonly chainId: number\r\n\r\n  public fortmatic: any\r\n\r\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\r\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.apiKey = apiKey\r\n    this.chainId = chainId\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.fortmatic) {\r\n      const { default: Fortmatic } = await import('fortmatic')\r\n      this.fortmatic = new Fortmatic(\r\n        this.apiKey,\r\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\r\n      )\r\n    }\r\n\r\n    const account = await this.fortmatic\r\n      .getProvider()\r\n      .enable()\r\n      .then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.fortmatic.getProvider()\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.fortmatic\r\n      .getProvider()\r\n      .send('eth_accounts')\r\n      .then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {}\r\n\r\n  public async close() {\r\n    await this.fortmatic.user.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","fortmatic","getProvider","enable","then","accounts","account","provider","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;AACtD,KAAG,SADmD;AAEtD,KAAG,SAFmD;AAGtD,KAAG,SAHmD;AAItD,MAAI,OAJkD;AAKtD,MAAI;AALkD,CAAxD;IAaaC,kBAAb;AAAA;;AAME;;;QAAcC,cAAAA;QAAQC,eAAAA;AACpB,KAAUC,MAAM,CAACC,IAAP,CAAYL,gBAAZ,EAA8BM,QAA9B,CAAuCH,OAAO,CAACI,QAAR,EAAvC,CAAV,IAAAC,SAAS,iCAAoFL,OAApF,CAAT,CAAA;AACA,0CAAM;AAAEM,MAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,KAAN;AAEA,UAAKD,MAAL,GAAcA,MAAd;AACA,UAAKC,OAAL,GAAeA,OAAf;;AACD;;AAZH;;AAAA,SAceO,QAdf;AAAA;;+BAuB0B,OAAKC,SAAL,CACnBC,WADmB,GAEnBC,MAFmB,GAGnBC,IAHmB,CAGd,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAHc,kBAAhBC;AAKN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,OAAKN,SAAL,CAAeC,WAAf,EAAZ;AAA0CT,YAAAA,OAAO,EAAE,OAAKA,OAAxD;AAAiEa,YAAAA,OAAO,EAAPA;AAAjE,WAAP;;;;mBAbK;;;YAAD,CAAC,OAAKL;iCAC6B,mEAAO,WAAP;gBAApBO;AACjB,mBAAKP,SAAL,GAAiB,IAAIO,SAAJ,CACf,OAAKhB,MADU,EAEf,OAAKC,OAAL,KAAiB,CAAjB,IAAsB,OAAKA,OAAL,KAAiB,CAAvC,GAA2CgB,SAA3C,GAAuDnB,gBAAgB,CAAC,OAAKG,OAAN,CAFxD,CAAjB;;;;;;AAYH,KA7BH;AAAA;AAAA;AAAA;;AAAA,SA+BeS,WA/Bf;AAAA;mBAgCW;;AAAP,6BAAO,OAAKD,SAAL,CAAeC,WAAf,EAAP;AACD,KAjCH;AAAA;AAAA;AAAA;;AAAA,SAmCeQ,UAnCf;AAAA;mBAoCW;;AAAP,6BAAO,OAAKjB,OAAZ;AACD,KArCH;AAAA;AAAA;AAAA;;AAAA,SAuCekB,UAvCf;AAAA;mBAwCW;;AAAP,6BAAO,OAAKV,SAAL,CACJC,WADI,GAEJU,IAFI,CAEC,cAFD,EAGJR,IAHI,CAGC,UAACC,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAHD,CAAP;AAID,KA5CH;AAAA;AAAA;AAAA;;AAAA,SA8CSQ,UA9CT,GA8CS,wBA9CT;;AAAA,SAgDeC,KAhDf;AAAA;oBAiDU;;6BAAA,QAAKb,SAAL,CAAec,IAAf,CAAoBC,MAApB;AACN,gBAAKC,cAAL;;AACD,KAnDH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAwCC,mCAAxC;;;;"}
{"version":3,"file":"squarelink-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  5: 'goerli',\r\n  42: 'kovan',\r\n  56: 'bsc',\r\n  100: 'xdai'\r\n}\r\n\r\ntype Network = number | { chainId: number;[key: string]: any }\r\n\r\ninterface SquarelinkConnectorArguments {\r\n  clientId: string\r\n  networks: Network[]\r\n  options?: any\r\n}\r\n\r\nexport class SquarelinkConnector extends AbstractConnector {\r\n  private readonly clientId: string\r\n  private readonly networks: Network[]\r\n  private readonly options: any\r\n\r\n  public squarelink: any\r\n\r\n  constructor({ clientId, networks, options = {} }: SquarelinkConnectorArguments) {\r\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : n.chainId))\r\n    invariant(\r\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\r\n      `One or more unsupported networks ${networks}`\r\n    )\r\n    super({ supportedChainIds: chainIds })\r\n\r\n    this.clientId = clientId\r\n    this.networks = networks\r\n    this.options = options\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.squarelink) {\r\n      const { default: Squarelink } = await import('squarelink')\r\n      this.squarelink = new Squarelink(\r\n        this.clientId,\r\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : this.networks[0],\r\n        this.options\r\n      )\r\n    }\r\n\r\n\r\n    const provider = await this.squarelink.getProvider()\r\n\r\n    const account = await provider.enable().then((accounts: string[]): string => accounts[0])\r\n\r\n    const chainId = await provider.send('eth_chainId');\r\n\r\n    return { provider, account, chainId }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return await this.squarelink.getProvider()\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    const provider = await this.squarelink.getProvider();\r\n    return await provider.send('eth_chainId');\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    const provider = await this.squarelink.getProvider();\r\n    return await provider.send('eth_accounts').then((accounts: string[]): string => accounts[0]);\r\n  }\r\n\r\n  public deactivate() { }\r\n}\r\n"],"names":["chainIdToNetwork","clientId","networks","options","chainIds","map","n","chainId","every","c","invariant","supportedChainIds","activate","_this3","squarelink","getProvider","provider","enable","then","accounts","account","send","this","Squarelink","getChainId","getAccount","deactivate","AbstractConnector"],"mappings":"8IAIMA,EAAkD,GACnD,YACA,YACA,YACA,YACC,WACA,UACC,4EAkBSC,IAAAA,SAAUC,IAAAA,aAAUC,QAAAA,aAAU,KACpCC,EAAWF,EAASG,KAAI,SAACC,SAA4B,iBAANA,EAAiBA,EAAIA,EAAEC,kBAE1EH,EAASI,OAAM,SAACC,WAAiBT,EAAiBS,OADpDC,qBAIM,CAAEC,kBAAmBP,WAEtBH,SAAWA,IACXC,SAAWA,IACXC,QAAUA,sHAGJS,gEAWYC,EAAKC,WAAWC,8BAAjCC,0BAEgBA,EAASC,SAASC,MAAK,SAACC,UAA+BA,EAAS,sBAAhFC,0BAEgBJ,EAASK,KAAK,+BAA9Bd,SAEC,CAAES,SAAAA,EAAUI,QAAAA,EAASb,QAAAA,eAhBvBe,sBAAAT,EAAKC,kCAC8B,8QAAO,wCACxCA,WAAa,IAAIS,aACpBV,EAAKZ,SACuB,iBAArBY,EAAKX,SAAS,GAAkBF,EAAiBa,EAAKX,SAAS,IAAMW,EAAKX,SAAS,GAC1FW,EAAKV,qGAcEY,kDACEO,KAAKR,WAAWC,qDAGlBS,iDACYF,KAAKR,WAAWC,8BAAjCC,0BACOA,EAASK,KAAK,yDAGhBI,iDACYH,KAAKR,WAAWC,8BAAjCC,0BACOA,EAASK,KAAK,gBAAgBH,MAAK,SAACC,UAA+BA,EAAS,gDAGpFO,WAAA,gBAtDgCC"}
{"version":3,"file":"torus-connector.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\n\r\ninterface TorusConnectorArguments {\r\n  chainId: number\r\n  initOptions?: any\r\n  constructorOptions?: any\r\n  loginOptions?: any\r\n}\r\n\r\nexport class TorusConnector extends AbstractConnector {\r\n  private readonly chainId: number\r\n  private readonly initOptions: any\r\n  private readonly constructorOptions: any\r\n  private readonly loginOptions: any\r\n\r\n  public torus: any\r\n\r\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.chainId = chainId\r\n    this.initOptions = initOptions\r\n    this.constructorOptions = constructorOptions\r\n    this.loginOptions = loginOptions\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.torus) {\r\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\r\n      this.torus = new Torus(this.constructorOptions)\r\n      await this.torus.init(this.initOptions)\r\n    }\r\n\r\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.torus.provider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.torus.provider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public async deactivate() {}\r\n\r\n  public async close() {\r\n    await this.torus.cleanUp()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","getChainId","getAccount","ethereum","send","deactivate","close","cleanUp","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUaA,cAAb;AAAA;;AAQE;;;QAAcC,eAAAA;gCAASC;QAAAA,4CAAc;qCAAIC;QAAAA,wDAAqB;iCAAIC;QAAAA,8CAAe;AAC/E,0CAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACJ,OAAD;AAArB,KAAN;AAEA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAKC,kBAAL,GAA0BA,kBAA1B;AACA,UAAKC,YAAL,GAAoBA,YAApB;;AACD;;AAfH;;AAAA,SAiBeE,QAjBf;AAAA;;+BAwB0B,OAAKC,KAAL,CAAWC,KAAX,CAAiB,OAAKJ,YAAtB,EAAoCK,IAApC,CAAyC,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAAzC,kBAAhBC;AAEN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,OAAKL,KAAL,CAAWK,QAAvB;AAAiCD,YAAAA,OAAO,EAAPA;AAAjC,WAAP;;;;mBARK;;;YAAD,CAAC,OAAKJ;iCACY,mEAAO,wBAAP,QAAiCE,IAAjC,CAAsC,UAAAI,CAAC;AAAA;;AAAA,iCAAIA,CAAJ,oBAAIA,CAAC,WAAL,yBAAkBA,CAAlB;AAAA,WAAvC,kBAAdC;AACN,mBAAKP,KAAL,GAAa,IAAIO,KAAJ,CAAU,OAAKX,kBAAf,CAAb;mCACM,OAAKI,KAAL,CAAWQ,IAAX,CAAgB,OAAKb,WAArB;;;;;;AAMT,KA3BH;AAAA;AAAA;AAAA;;AAAA,SA6Bec,WA7Bf;AAAA;mBA8BW;;AAAP,6BAAO,OAAKT,KAAL,CAAWK,QAAlB;AACD,KA/BH;AAAA;AAAA;AAAA;;AAAA,SAiCeK,UAjCf;AAAA;mBAkCW;;AAAP,6BAAO,OAAKhB,OAAZ;AACD,KAnCH;AAAA;AAAA;AAAA;;AAAA,SAqCeiB,UArCf;AAAA;mBAsCW;;AAAP,6BAAO,OAAKX,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyB,cAAzB,EAAyCX,IAAzC,CAA8C,UAACC,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAA9C,CAAP;AACD,KAvCH;AAAA;AAAA;AAAA;;AAAA,SAyCeW,UAzCf;;AAyC8B,GAzC9B;;AAAA,SA2CeC,KA3Cf;AAAA;oBA4CU;;6BAAA,QAAKf,KAAL,CAAWgB,OAAX;AACN,gBAAKC,cAAL;;AACD,KA9CH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAoCC,mCAApC;;;;"}
{"version":3,"file":"torus-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\n\r\ninterface TorusConnectorArguments {\r\n  chainId: number\r\n  initOptions?: any\r\n  constructorOptions?: any\r\n  loginOptions?: any\r\n}\r\n\r\nexport class TorusConnector extends AbstractConnector {\r\n  private readonly chainId: number\r\n  private readonly initOptions: any\r\n  private readonly constructorOptions: any\r\n  private readonly loginOptions: any\r\n\r\n  public torus: any\r\n\r\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.chainId = chainId\r\n    this.initOptions = initOptions\r\n    this.constructorOptions = constructorOptions\r\n    this.loginOptions = loginOptions\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.torus) {\r\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\r\n      this.torus = new Torus(this.constructorOptions)\r\n      await this.torus.init(this.initOptions)\r\n    }\r\n\r\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.torus.provider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.torus.provider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public async deactivate() {}\r\n\r\n  public async close() {\r\n    await this.torus.cleanUp()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","_this3","torus","login","then","accounts","account","provider","this","m","Torus","init","getProvider","getChainId","getAccount","ethereum","send","deactivate","close","_this11","cleanUp","emitDeactivate","AbstractConnector"],"mappings":"4HAkBgBA,IAAAA,YAASC,YAAAA,aAAc,SAAIC,mBAAAA,aAAqB,SAAIC,aAAAA,aAAe,0BACzE,CAAEC,kBAAmB,CAACJ,YAEvBA,QAAUA,IACVC,YAAcA,IACdC,mBAAqBA,IACrBC,aAAeA,sHAGTE,gEAOWC,EAAKC,MAAMC,MAAMF,EAAKH,cAAcM,MAAK,SAACC,UAA+BA,EAAS,sBAAlGC,SAEC,CAAEC,SAAUN,EAAKC,MAAMK,SAAUD,QAAAA,SARnCE,sBAAAP,EAAKC,6BACY,8QAAO,+BAA0BE,MAAK,SAAAK,+BAAKA,SAAAA,aAAcA,qBAAvEC,YACDR,MAAQ,IAAIQ,EAAMT,EAAKJ,oCACtBI,EAAKC,MAAMS,KAAKV,EAAKL,+HAQlBgB,kDACJJ,KAAKN,MAAMK,gDAGPM,iDACJL,KAAKb,+CAGDmB,iDACJN,KAAKN,MAAMa,SAASC,KAAK,gBAAgBZ,MAAK,SAACC,UAA+BA,EAAS,6CAGnFY,kDAEAC,2BACLV,4BAAAW,EAAKjB,MAAMkB,8BACZC,2DA7C2BC"}
{"version":3,"file":"portis-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  5: 'goerli',\r\n  42: 'kovan',\r\n  56: 'bsc',\r\n  100: 'xdai',\r\n  30: 'orchid',\r\n  31: 'orchidTestnet',\r\n  99: 'core',\r\n  77: 'sokol',\r\n  61: 'classic',\r\n  8: 'ubiq',\r\n  108: 'thundercore',\r\n  18: 'thundercoreTestnet',\r\n  163: 'lightstreams',\r\n  122: 'fuse',\r\n  15001: 'maticTestnet'\r\n}\r\n\r\ntype Network = number | { chainId: string; [key: string]: any }\r\n\r\ninterface PortisConnectorArguments {\r\n  dAppId: string\r\n  networks: Network[]\r\n  config?: any\r\n}\r\n\r\nexport class PortisConnector extends AbstractConnector {\r\n  private readonly dAppId: string\r\n  private readonly networks: Network[]\r\n  private readonly config: any\r\n\r\n  public portis: any\r\n\r\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\r\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\r\n    invariant(\r\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\r\n      `One or more unsupported networks ${networks}`\r\n    )\r\n    super({ supportedChainIds: chainIds })\r\n\r\n    this.dAppId = dAppId\r\n    this.networks = networks\r\n    this.config = config\r\n\r\n    this.handleOnLogout = this.handleOnLogout.bind(this)\r\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\r\n    this.handleOnError = this.handleOnError.bind(this)\r\n  }\r\n\r\n  private handleOnLogout(): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onLogout' event\")\r\n    }\r\n    this.emitDeactivate()\r\n  }\r\n\r\n  private handleOnActiveWalletChanged(account: string): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\r\n    }\r\n    this.emitUpdate({ account })\r\n  }\r\n\r\n  private handleOnError(error: Error): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onError' event\")\r\n    }\r\n    this.emitError(error)\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.portis) {\r\n      const { default: Portis } = await import('@portis/web3')\r\n      this.portis = new Portis(\r\n        this.dAppId,\r\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\r\n        this.config\r\n      )\r\n    }\r\n\r\n    this.portis.onLogout(this.handleOnLogout)\r\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\r\n    this.portis.onError(this.handleOnError)\r\n\r\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.portis.provider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.portis.provider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.portis.provider.send('eth_chainId')\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {\r\n    this.portis.onLogout(() => {})\r\n    this.portis.onActiveWalletChanged(() => {})\r\n    this.portis.onError(() => {})\r\n  }\r\n\r\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\r\n    if (typeof newNetwork === 'number') {\r\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\r\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\r\n      this.emitUpdate({ chainId: newNetwork })\r\n    } else {\r\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\r\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\r\n    }\r\n  }\r\n\r\n  public async close() {\r\n    await this.portis.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","dAppId","networks","config","chainIds","map","n","Number","chainId","every","c","invariant","supportedChainIds","handleOnLogout","_this","bind","handleOnActiveWalletChanged","handleOnError","emitDeactivate","account","emitUpdate","error","emitError","activate","portis","onLogout","_this3","onActiveWalletChanged","onError","provider","enable","then","accounts","this","Portis","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","close","_this13","logout","AbstractConnector"],"mappings":"yQAIA,IAAMA,EAAkD,GACnD,YACA,YACA,YACA,YACC,WACA,UACC,UACD,YACA,mBACA,UACA,WACA,YACD,WACE,iBACD,yBACC,mBACA,aACE,gFAkBOC,IAAAA,OAAQC,IAAAA,aAAUC,OAAAA,aAAS,KACjCC,EAAWF,EAASG,KAAI,SAACC,SAA4B,iBAANA,EAAiBA,EAAIC,OAAOD,EAAEE,mBAEjFJ,EAASK,OAAM,SAACC,WAAiBV,EAAiBU,OADpDC,qBAIM,CAAEC,kBAAmBR,WAEtBH,OAASA,IACTC,SAAWA,IACXC,OAASA,IAETU,eAAiBC,EAAKD,eAAeE,aACrCC,4BAA8BF,EAAKE,4BAA4BD,aAC/DE,cAAgBH,EAAKG,cAAcF,+HAGlCF,eAAA,gBAIDK,oBAGCF,4BAAA,SAA4BG,QAI7BC,WAAW,CAAED,QAAAA,OAGZF,cAAA,SAAcI,QAIfC,UAAUD,MAGJE,kDAUNC,OAAOC,SAASC,EAAKb,kBACrBW,OAAOG,sBAAsBD,EAAKV,+BAClCQ,OAAOI,QAAQF,EAAKT,+BAEHS,EAAKF,OAAOK,SAASC,SAASC,MAAK,SAACC,UAA+BA,EAAS,sBAA5Fb,SAEC,CAAEU,SAAUH,EAAKF,OAAOK,SAAUV,QAAAA,SAfpCc,sBAAAP,EAAKF,8BAC0B,8QAAO,0CACpCA,OAAS,IAAIU,aAChBR,EAAKzB,OACuB,iBAArByB,EAAKxB,SAAS,GAAkBF,EAAiB0B,EAAKxB,SAAS,IAAOwB,EAAKxB,SAAS,GAC3FwB,EAAKvB,oGAaEgC,kDACJF,KAAKT,OAAOK,gDAGRO,iDACJH,KAAKT,OAAOK,SAASQ,KAAK,sDAGtBC,iDACJL,KAAKT,OAAOK,SAASQ,KAAK,gBAAgBN,MAAK,SAACC,UAA+BA,EAAS,6CAG1FO,WAAA,gBACAf,OAAOC,UAAS,oBAChBD,OAAOG,uBAAsB,oBAC7BH,OAAOI,SAAQ,kBAGTY,uBAAcC,EAA8BC,aAC7B,iBAAfD,GACGzC,EAAiByC,IAA7B9B,MACAsB,KAAKT,OAAOgB,cAAcxC,EAAiByC,GAAaC,GAAxDT,KACKb,WAAW,CAAEZ,QAASiC,MAD3BR,KAGKT,OAAOgB,cAAcC,EAAYC,GAHtCT,KAIKb,WAAW,CAAEZ,QAASD,OAAOkC,EAAWjC,oEAIpCmC,2BACLV,4BAAAW,EAAKpB,OAAOqB,6BACb3B,2DA/F4B4B"}
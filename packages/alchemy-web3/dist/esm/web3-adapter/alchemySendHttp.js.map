{"version":3,"file":"alchemySendHttp.js","sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAGvC,IAAM,eAAe,GAAG,IAAI,OAAO,CAAC;IAClC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE,kBAAkB;CACnC,CAAC,CAAC;AACH,IAAM,iBAAiB,GAAG,GAAG,CAAC;AAE9B,MAAM,UAAU,cAAc,CAAC,GAAW;IAA1C,iBA2BC;IA1BC,OAAO,UAAM,OAAO;;;;wBACD,qBAAM,UAAU,CAAC,GAAG,EAAE;wBACrC,MAAM,EAAE,MAAM;wBACd,OAAO,eAAM,eAAe,CAAC;wBAC7B,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;qBAC9B,CAAC,EAAA;;oBAJI,QAAQ,GAAG,SAIf;oBACM,MAAM,GAAK,QAAQ,OAAb,CAAc;oBACpB,KAAA,MAAM,CAAA;;6BACP,GAAG,CAAC,CAAJ,wBAAG;6BAEH,iBAAiB,CAAC,CAAlB,wBAAiB;6BAEjB,CAAC,CAAC,CAAF,wBAAC;;;;2BAHK,IAAI,EAAE,SAAS;oBAAY,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;wBAAzD,uBAA0B,WAAQ,GAAE,SAAqB,OAAG;wBAE5D,sBAAO,EAAE,IAAI,EAAE,WAAW,EAAE,EAAC;wBAE7B,sBAAO;wBACL,IAAI,EAAE,cAAc;wBACpB,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,oBAAoB;qBAC9B,EAAC;;;wBAGA,MAAM,QAAA;wBACN,IAAI,EAAE,cAAc;;oBACV,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;wBAHjC,uBAGE,UAAO,GAAE,CAAC,SAAqB,CAAC,CAAC,OAAO;6BACxC;;;SAEP,CAAC;AACJ,CAAC","sourcesContent":["import { AlchemySendFunction } from \"./alchemySend\";\r\nimport { fetchAsync } from '@0x/utils';\r\n\r\n\r\nconst ALCHEMY_HEADERS = new Headers({\r\n  Accept: \"application/json\",\r\n  \"Content-Type\": \"application/json\"\r\n});\r\nconst RATE_LIMIT_STATUS = 429;\r\n\r\nexport function makeHttpSender(url: string): AlchemySendFunction {\r\n  return async request => {\r\n    const response = await fetchAsync(url, {\r\n      method: \"POST\",\r\n      headers: {...ALCHEMY_HEADERS},\r\n      body: JSON.stringify(request),\r\n    });\r\n    const { status } = response;\r\n    switch (status) {\r\n      case 200:\r\n        return { type: \"jsonrpc\", response: await response.json() };\r\n      case RATE_LIMIT_STATUS:\r\n        return { type: \"rateLimit\" };\r\n      case 0:\r\n        return {\r\n          type: \"networkError\",\r\n          status: 0,\r\n          message: \"Connection failed.\",\r\n        };\r\n      default:\r\n        return {\r\n          status,\r\n          type: \"networkError\",\r\n          message: (await response.json()).message,\r\n        };\r\n    }\r\n  };\r\n}\r\n"]}
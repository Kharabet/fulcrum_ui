{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAAA,gFAAgF;AAsChF,MAAM,UAAU,UAAU,CACxB,OAAyB;IAEzB,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;QACtB,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,IAAK,OAA2B,CAAC,EAAE,KAAK,SAAS,CAAC,CAC7E,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,OAAyB;IAEzB,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC;AA+BD,OAAO,EAAE,kBAAkB,EAAE,MAAM,GAAG,CAAA","sourcesContent":["// The JSON-RPC types in Web3 definitions aren't quite right. Use these instead.\r\n\r\nexport type JsonRpcId = string | number | null;\r\n\r\nexport interface JsonRpcRequest {\r\n  jsonrpc: \"2.0\";\r\n  method: string;\r\n  params?: any[];\r\n  id?: JsonRpcId;\r\n}\r\n\r\nexport interface JsonRpcResponse<T = any> {\r\n  jsonrpc: \"2.0\";\r\n  result?: T;\r\n  error?: JsonRpcError;\r\n  id: JsonRpcId;\r\n}\r\n\r\nexport type SingleOrBatchRequest = JsonRpcRequest | JsonRpcRequest[];\r\nexport type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];\r\n\r\nexport interface JsonRpcError<T = any> {\r\n  code: number;\r\n  message: string;\r\n  data?: T;\r\n}\r\n\r\nexport interface SubscriptionEvent<T = any> {\r\n  jsonrpc: \"2.0\";\r\n  method: \"eth_subscription\";\r\n  params: {\r\n    subscription: string;\r\n    result: T;\r\n  };\r\n}\r\n\r\nexport type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;\r\n\r\nexport function isResponse(\r\n  message: WebSocketMessage,\r\n): message is SingleOrBatchResponse {\r\n  return (\r\n    Array.isArray(message) ||\r\n    (message.jsonrpc === \"2.0\" && (message as JsonRpcResponse).id !== undefined)\r\n  );\r\n}\r\n\r\nexport function isSubscriptionEvent(\r\n  message: WebSocketMessage,\r\n): message is SubscriptionEvent {\r\n  return !isResponse(message);\r\n}\r\n\r\nexport interface AlchemyWeb3Config {\r\n  writeProvider?: Provider | null;\r\n  maxRetries?: number;\r\n  retryInterval?: number;\r\n  retryJitter?: number;\r\n}\r\n\r\nexport type FullConfig = Required<AlchemyWeb3Config>;\r\n\r\nexport type Provider =\r\n  | {\r\n      sendAsync(payload: any, callback: any): void;\r\n    }\r\n  | {\r\n      send(payload: any, callback: any): void;\r\n    };\r\n\r\nexport interface Eip1193Provider {\r\n  send(method: string, params?: any[]): Promise<any>;\r\n}\r\n\r\nexport interface LegacyProvider {\r\n  sendAsync(payload: any, callback: (error: any, result: any) => void): void;\r\n}\r\n\r\nexport type Web3Callback<T> = (error: Error | null, result?: T) => void;\r\n\r\nexport type SendFunction = (method: string, params?: any[]) => Promise<any>;\r\n\r\nexport { AlchemySubprovider } from \".\""]}
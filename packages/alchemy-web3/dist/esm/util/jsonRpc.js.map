{"version":3,"file":"jsonRpc.js","sourceRoot":"","sources":["../../../src/util/jsonRpc.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,MAAM,UAAU,kBAAkB;IAChC,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,UAAC,MAAM,EAAE,MAAM,IAAK,OAAA,CAAC,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,EAAlD,CAAkD,CAAC;AAChF,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,WAAgC,EAChC,WAA2B;IAF7B,iBAkCC;IA9BC,IAAM,IAAI,GAAiB,UAAO,MAAM,EAAE,MAAM;;;;wBAC7B,qBAAM,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAA;;oBAAzD,QAAQ,GAAG,SAA8C;oBAC/D,IAAI,QAAQ,CAAC,KAAK,EAAE;wBAClB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBACzC;oBACD,sBAAO,QAAQ,CAAC,MAAM,EAAC;;;SACxB,CAAC;IAEF,SAAe,SAAS,CAAC,KAAkB;;;;;;wBACnC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,EAAkB;gCAAhB,MAAM,YAAA,EAAE,MAAM,YAAA;4BACzC,OAAA,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC;wBAA3B,CAA2B,CAC5B,CAAC;wBACe,qBAAM,WAAW,CAAC,OAAO,CAAC,EAAA;;wBAArC,QAAQ,GAAG,SAA0B;wBAC3C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;4BACtB,OAAO,GAAG,QAAQ,CAAC,KAAK;gCAC5B,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO;gCACxB,CAAC,CAAC,sBAAsB,CAAC;4BAC3B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;yBAC1B;wBACK,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,KAAK,EAAT,CAAS,CAAC,CAAC;wBACpD,IAAI,aAAa,EAAE;4BACjB,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,KAAM,CAAC,OAAO,CAAC,CAAC;yBAC/C;wBACD,0EAA0E;wBAC1E,sBAAO,QAAQ;iCACZ,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAC,EAAE,CAAC,EAAa,GAAI,EAAE,CAAC,EAAa,EAArC,CAAqC,CAAC;iCACvD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,EAAC;;;;KACvB;IAED,OAAO,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["import { JsonRpcRequest, SendFunction } from \"../types\";\r\nimport { SendPayloadFunction } from \"../web3-adapter/sendPayload\";\r\n\r\nexport type PayloadFactory = (method: string, params?: any[]) => JsonRpcRequest;\r\n\r\nexport interface JsonRpcSenders {\r\n  send: SendFunction;\r\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\r\n}\r\n\r\nexport interface BatchPart {\r\n  method: string;\r\n  params?: any;\r\n}\r\n\r\nexport function makePayloadFactory(): PayloadFactory {\r\n  let nextId = 0;\r\n  return (method, params) => ({ method, params, jsonrpc: \"2.0\", id: nextId++ });\r\n}\r\n\r\nexport function makeSenders(\r\n  sendPayload: SendPayloadFunction,\r\n  makePayload: PayloadFactory,\r\n): JsonRpcSenders {\r\n  const send: SendFunction = async (method, params) => {\r\n    const response = await sendPayload(makePayload(method, params));\r\n    if (response.error) {\r\n      throw new Error(response.error.message);\r\n    }\r\n    return response.result;\r\n  };\r\n\r\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\r\n    const payload = parts.map(({ method, params }) =>\r\n      makePayload(method, params),\r\n    );\r\n    const response = await sendPayload(payload);\r\n    if (!Array.isArray(response)) {\r\n      const message = response.error\r\n        ? response.error.message\r\n        : \"Batch request failed\";\r\n      throw new Error(message);\r\n    }\r\n    const errorResponse = response.find(r => !!r.error);\r\n    if (errorResponse) {\r\n      throw new Error(errorResponse.error!.message);\r\n    }\r\n    // The ids are ascending numbers because that's what Payload Factories do.\r\n    return response\r\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\r\n      .map(r => r.result);\r\n  }\r\n\r\n  return { send, sendBatch };\r\n}\r\n"]}
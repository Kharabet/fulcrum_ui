{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\r\nimport { Log, Transaction } from \"web3-core\";\r\nimport { BlockHeader, Eth, LogsOptions, Subscription, Syncing } from \"web3-eth\";\r\nimport { hexToNumberString, toHex } from \"web3-utils\";\r\nimport {\r\n  AlchemyWeb3Config,\r\n  FullConfig,\r\n  JsonRpcRequest,\r\n  Provider,\r\n  Web3Callback,\r\n} from \"./types\";\r\nimport { callWhenDone } from \"./util/promises\";\r\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\r\nimport FullTransactionsSubscription from \"./web3-adapter/fullTransactionsSubscription\";\r\nimport {\r\n  Callback,\r\n  ErrorCallback,\r\n  JSONRPCRequestPayload,\r\n  Subprovider,\r\n} from \"@0x/subproviders\";\r\nimport { makeHttpSender } from \"./web3-adapter/alchemySendHttp\";\r\nimport { makePayloadSender, PayloadSender } from \"./web3-adapter/sendPayload\";\r\n\r\nconst DEFAULT_MAX_RETRIES = 3;\r\nconst DEFAULT_RETRY_INTERVAL = 1000;\r\nconst DEFAULT_RETRY_JITTER = 250;\r\n\r\nexport interface AlchemyWeb3 extends Web3 {\r\n  alchemy: AlchemyMethods;\r\n  eth: AlchemyEth;\r\n  setWriteProvider(provider: Provider | null | undefined): void;\r\n}\r\n\r\nexport interface AlchemyMethods {\r\n  getTokenAllowance(\r\n    params: TokenAllowanceParams,\r\n    callback?: Web3Callback<TokenAllowanceResponse>,\r\n  ): Promise<TokenAllowanceResponse>;\r\n  getTokenBalances(\r\n    address: string,\r\n    contractAddresses: string[],\r\n    callback?: Web3Callback<TokenBalancesResponse>,\r\n  ): Promise<TokenBalancesResponse>;\r\n  getTokenMetadata(\r\n    address: string,\r\n    callback?: Web3Callback<TokenMetadataResponse>,\r\n  ): Promise<TokenMetadataResponse>;\r\n  getAssetTransfers(\r\n    params: AssetTransfersParams,\r\n    callback?: Web3Callback<AssetTransfersResponse>,\r\n  ): Promise<AssetTransfersResponse>;\r\n}\r\n\r\nexport interface TokenAllowanceParams {\r\n  contract: string;\r\n  owner: string;\r\n  spender: string;\r\n}\r\n\r\nexport type TokenAllowanceResponse = string;\r\n\r\nexport interface TokenBalancesResponse {\r\n  address: string;\r\n  tokenBalances: TokenBalance[];\r\n}\r\n\r\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\r\n\r\nexport interface TokenBalanceSuccess {\r\n  address: string;\r\n  tokenBalance: string;\r\n  error: null;\r\n}\r\n\r\nexport interface TokenBalanceFailure {\r\n  address: string;\r\n  tokenBalance: null;\r\n  error: string;\r\n}\r\n\r\nexport interface TokenMetadataResponse {\r\n  decimals: number | null;\r\n  logo: string | null;\r\n  name: string | null;\r\n  symbol: string | null;\r\n}\r\n\r\nexport interface AssetTransfersParams {\r\n  fromBlock?: string;\r\n  toBlock?: string;\r\n  fromAddress?: string;\r\n  toAddress?: string;\r\n  contractAddresses?: string[];\r\n  excludeZeroValue?: boolean;\r\n  maxCount?: number;\r\n  category?: AssetTransfersCategory[];\r\n  pageKey?: string;\r\n}\r\n\r\nexport enum AssetTransfersCategory {\r\n  EXTERNAL = \"external\",\r\n  INTERNAL = \"internal\",\r\n  TOKEN = \"token\",\r\n}\r\n\r\nexport interface AssetTransfersResponse {\r\n  transfers: AssetTransfersResult[];\r\n  pageKey?: string;\r\n}\r\n\r\nexport interface AssetTransfersResult {\r\n  category: AssetTransfersCategory;\r\n  blockNum: string;\r\n  from: string;\r\n  to: string | null;\r\n  value: number | null;\r\n  erc721TokenId: string | null;\r\n  asset: string | null;\r\n  hash: string;\r\n  rawContract: RawContract;\r\n}\r\n\r\nexport interface RawContract {\r\n  value: string | null;\r\n  address: string | null;\r\n  decimal: string | null;\r\n}\r\n\r\n/**\r\n * Same as Eth, but with `subscribe` allowing more types.\r\n */\r\nexport interface AlchemyEth extends Eth {\r\n  subscribe(\r\n    type: \"logs\",\r\n    options?: LogsOptions,\r\n    callback?: (error: Error, log: Log) => void,\r\n  ): Subscription<Log>;\r\n  subscribe(\r\n    type: \"syncing\",\r\n    options?: null,\r\n    callback?: (error: Error, result: Syncing) => void,\r\n  ): Subscription<Syncing>;\r\n  subscribe(\r\n    type: \"newBlockHeaders\",\r\n    options?: null,\r\n    callback?: (error: Error, blockHeader: BlockHeader) => void,\r\n  ): Subscription<BlockHeader>;\r\n  subscribe(\r\n    type: \"pendingTransactions\",\r\n    options?: null,\r\n    callback?: (error: Error, transactionHash: string) => void,\r\n  ): Subscription<string>;\r\n  subscribe(\r\n    type: \"alchemy_fullPendingTransactions\",\r\n    options?: null,\r\n    callback?: (error: Error, transaction: Transaction) => void,\r\n  ): Subscription<Transaction>;\r\n  subscribe(\r\n    type:\r\n      | \"pendingTransactions\"\r\n      | \"logs\"\r\n      | \"syncing\"\r\n      | \"newBlockHeaders\"\r\n      | \"alchemy_fullPendingTransactions\",\r\n    options?: null | LogsOptions,\r\n    callback?: (\r\n      error: Error,\r\n      item: Log | Syncing | BlockHeader | string | Transaction,\r\n    ) => void,\r\n  ): Subscription<Log | BlockHeader | Syncing | string>;\r\n}\r\n\r\ninterface EthereumWindow extends Window {\r\n  ethereum?: any;\r\n}\r\n\r\ndeclare const window: EthereumWindow;\r\n\r\nexport function createAlchemyWeb3(\r\n  alchemyUrl: string,\r\n  config?: AlchemyWeb3Config,\r\n): AlchemyWeb3 {\r\n  const fullConfig = fillInConfigDefaults(config);\r\n  const { provider, setWriteProvider } = makeAlchemyContext(\r\n    alchemyUrl,\r\n    fullConfig,\r\n  );\r\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\r\n  alchemyWeb3.setProvider = () => {\r\n    throw new Error(\r\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\r\n    );\r\n  };\r\n  alchemyWeb3.setWriteProvider = setWriteProvider;\r\n  const send = alchemyWeb3.currentProvider.send.bind(\r\n    alchemyWeb3.currentProvider,\r\n  );\r\n  alchemyWeb3.alchemy = {\r\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        method: \"alchemy_getTokenAllowance\",\r\n        params: [params],\r\n      }),\r\n    getTokenBalances: (address, contractAddresses, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        method: \"alchemy_getTokenBalances\",\r\n        params: [address, contractAddresses],\r\n        processResponse: processTokenBalanceResponse,\r\n      }),\r\n    getTokenMetadata: (address, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        params: [address],\r\n        method: \"alchemy_getTokenMetadata\",\r\n      }),\r\n    getAssetTransfers: (params: AssetTransfersParams, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        params: [\r\n          {\r\n            ...params,\r\n            maxCount:\r\n              params.maxCount != null ? toHex(params.maxCount) : undefined,\r\n          },\r\n        ],\r\n        method: \"alchemy_getAssetTransfers\",\r\n      }),\r\n  };\r\n  patchSubscriptions(alchemyWeb3);\r\n  return alchemyWeb3;\r\n}\r\n\r\nfunction fillInConfigDefaults({\r\n  writeProvider = getWindowProvider(),\r\n  maxRetries = DEFAULT_MAX_RETRIES,\r\n  retryInterval = DEFAULT_RETRY_INTERVAL,\r\n  retryJitter = DEFAULT_RETRY_JITTER,\r\n}: AlchemyWeb3Config = {}): FullConfig {\r\n  return { writeProvider, maxRetries, retryInterval, retryJitter };\r\n}\r\n\r\nfunction getWindowProvider(): Provider | null {\r\n  return typeof window !== \"undefined\" ? window.ethereum : null;\r\n}\r\n\r\ninterface CallAlchemyMethodParams<T> {\r\n  method: string;\r\n  params: any[];\r\n  callback?: Web3Callback<T>;\r\n  send(method: string, params?: any[]): any;\r\n  processResponse?(response: any): T;\r\n}\r\n\r\nfunction callAlchemyMethod<T>({\r\n  method,\r\n  params,\r\n  send,\r\n  callback = noop,\r\n  processResponse = identity,\r\n}: CallAlchemyMethodParams<T>): Promise<T> {\r\n  const promise = (async () => {\r\n    const result = await send(method, params);\r\n    return processResponse(result);\r\n  })();\r\n  callWhenDone(promise, callback);\r\n  return promise;\r\n}\r\n\r\nfunction processTokenBalanceResponse(\r\n  rawResponse: TokenBalancesResponse,\r\n): TokenBalancesResponse {\r\n  // Convert token balance fields from hex-string to decimal-string.\r\n  const fixedTokenBalances = rawResponse.tokenBalances.map(balance =>\r\n    balance.tokenBalance != null\r\n      ? { ...balance, tokenBalance: hexToNumberString(balance.tokenBalance) }\r\n      : balance,\r\n  );\r\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\r\n}\r\n\r\n/**\r\n * Updates Web3's internal subscription architecture to also handle Alchemy\r\n * specific subscriptions.\r\n */\r\nfunction patchSubscriptions(web3: Web3): void {\r\n  const { subscriptionsFactory } = web3.eth as any;\r\n  const oldGetSubscription = subscriptionsFactory.getSubscription.bind(\r\n    subscriptionsFactory,\r\n  );\r\n  subscriptionsFactory.getSubscription = (...args: any[]) => {\r\n    const [moduleInstance, type] = args;\r\n    if (type === \"alchemy_fullPendingTransactions\") {\r\n      return new FullTransactionsSubscription(\r\n        subscriptionsFactory.utils,\r\n        subscriptionsFactory.formatters,\r\n        moduleInstance,\r\n      );\r\n    } else {\r\n      return oldGetSubscription(...args);\r\n    }\r\n  };\r\n}\r\n\r\nfunction noop(): void {\r\n  // Nothing.\r\n}\r\n\r\nfunction identity<T>(x: T): T {\r\n  return x;\r\n}\r\n\r\nexport class AlchemySubprovider extends Subprovider {\r\n  public readonly alchemyWeb3: AlchemyWeb3;\r\n  public readonly payloadSender: PayloadSender;\r\n\r\n  /**\r\n   * Instantiates a new AlchemySubprovider\r\n   */\r\n  constructor(alchemyUrl: string, config: AlchemyWeb3Config) {\r\n    super();\r\n\r\n    const fullConfig = fillInConfigDefaults(config);\r\n    this.alchemyWeb3 = createAlchemyWeb3(alchemyUrl, config);\r\n    const alchemySend = makeHttpSender(alchemyUrl);\r\n    this.payloadSender = makePayloadSender(alchemySend, fullConfig);\r\n  }\r\n\r\n  /**\r\n   * This method conforms to the web3-provider-engine interface.\r\n   * It is called internally by the ProviderEngine when it is this subproviders\r\n   * turn to handle a JSON RPC request.\r\n   * @param payload JSON RPC payload\r\n   * @param next Callback to call if this subprovider decides not to handle the request\r\n   * @param end Callback to call if subprovider handled the request and wants to pass back the request.\r\n   */\r\n  public async handleRequest(\r\n    payload: JSONRPCRequestPayload,\r\n    next: Callback,\r\n    end: ErrorCallback,\r\n  ): Promise<void> {\r\n    switch (payload.method) {\r\n      case \"alchemy_getTokenAllowance\":\r\n        // @ts-ignore\r\n        const [contract, owner, spender] = payload.params;\r\n        const tokenAllowanceParams: TokenAllowanceParams = {\r\n          contract,\r\n          owner,\r\n          spender,\r\n        };\r\n        const tokenAllowanceResponse = await this.alchemyWeb3.alchemy.getTokenAllowance(\r\n          tokenAllowanceParams,\r\n        );\r\n        end(null, tokenAllowanceResponse);\r\n        break;\r\n      case \"alchemy_getTokenBalances\":\r\n        const [address, tokenAddresses] = payload.params;\r\n        const tokenBalancesResponse: TokenBalancesResponse = await this.alchemyWeb3.alchemy.getTokenBalances(\r\n          address,\r\n          tokenAddresses,\r\n        );\r\n        end(null, tokenBalancesResponse);\r\n        break;\r\n      case \"alchemy_getTokenMetadata\":\r\n        // @ts-ignore\r\n        const [contract] = payload.params;\r\n        const tokenMetadataResponse: TokenMetadataResponse = await this.alchemyWeb3.alchemy.getTokenMetadata(\r\n          contract,\r\n        );\r\n        end(null, tokenMetadataResponse);\r\n        break;\r\n      case \"alchemy_getAssetTransfers\":\r\n        const [\r\n          fromBlock,\r\n          toBlock,\r\n          fromAddress,\r\n          toAddress,\r\n          contractAddresses,\r\n          excludeZeroValue,\r\n          maxCount,\r\n          category,\r\n          pageKey,\r\n        ] = payload.params;\r\n        const assetTransfersParams: AssetTransfersParams = {\r\n          fromBlock,\r\n          toBlock,\r\n          fromAddress,\r\n          toAddress,\r\n          contractAddresses,\r\n          excludeZeroValue,\r\n          maxCount,\r\n          category,\r\n          pageKey,\r\n        };\r\n        const assetTransfersResponse: AssetTransfersResponse = await this.alchemyWeb3.alchemy.getAssetTransfers(\r\n          assetTransfersParams,\r\n        );\r\n        end(null, assetTransfersResponse);\r\n        break;\r\n      default:\r\n        const { params, method, id } = payload;\r\n        const alchemyPayload: JsonRpcRequest = {\r\n          params,\r\n          method,\r\n          id,\r\n          jsonrpc: \"2.0\",\r\n        };\r\n        try {\r\n          const data = await this.payloadSender.sendPayload(alchemyPayload);\r\n          if (data.error) {\r\n            // @ts-ignore\r\n            end(data.error, data);\r\n            break;\r\n          }\r\n          end(null, data.result);\r\n        } catch (e) {\r\n          next()\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n"]}